{"version":3,"sources":["/Users/fangm/workspace/expo/my-project/constants/Colors.js","/Users/fangm/workspace/expo/my-project/components/TabBarIcon.js","/Users/fangm/workspace/expo/my-project/components/StyledText.js","/Users/fangm/workspace/expo/my-project/screens/HomeScreen.js","/Users/fangm/workspace/expo/my-project/screens/LinksScreen.js","/Users/fangm/workspace/expo/my-project/navigation/BottomTabNavigator.js","/Users/fangm/workspace/expo/my-project/App.js","/Users/fangm/workspace/expo/my-project/navigation/useLinking.js","/Users/fangm/workspace/expo/my-project/web-build/register-service-worker.js","/Users/fangm/workspace/expo/my-project/assets/images/robot-prod.png","/Users/fangm/workspace/expo/my-project/assets/fonts/SpaceMono-Regular.ttf"],"names":["TabBarIcon","props","Ionicons","name","size","style","marginBottom","color","focused","Colors","MonoText","Text","fontFamily","HomeScreen","View","styles","container","contentContainerStyle","contentContainer","welcomeContainer","Image","source","require","welcomeImage","getStartedContainer","DevelopmentModeNotice","getStartedText","codeHighlightContainer","homeScreenFilename","helpContainer","TouchableOpacity","onPress","handleHelpPress","helpLink","helpLinkText","tabBarInfoContainer","tabBarInfoText","navigationFilename","codeHighlightText","developmentModeText","WebBrowser","navigationOptions","header","StyleSheet","create","flex","backgroundColor","fontSize","lineHeight","textAlign","paddingTop","alignItems","marginTop","width","height","resizeMode","marginLeft","marginHorizontal","marginVertical","borderRadius","paddingHorizontal","position","bottom","left","right","Platform","select","ios","shadowColor","shadowOffset","shadowOpacity","shadowRadius","android","elevation","paddingVertical","LinksScreen","OptionButton","icon","label","isLastOption","option","lastOption","flexDirection","optionIconContainer","optionTextContainer","optionText","marginRight","borderWidth","hairlineWidth","borderBottomWidth","borderColor","alignSelf","BottomTab","createBottomTabNavigator","BottomTabNavigator","navigation","route","setOptions","headerTitle","getHeaderTitle","Navigator","initialRouteName","Screen","component","options","title","tabBarIcon","state","routes","index","Stack","createStackNavigator","App","React","isLoadingComplete","setLoadingComplete","initialNavigationState","setInitialNavigationState","containerRef","getInitialState","useLinking","prefixes","Linking","makeUrl","config","Root","path","screens","Home","Links","Settings","a","async","SplashScreen","preventAutoHide","Font","font","console","warn","hide","skipLoadingScreen","OS","StatusBar","barStyle","NavigationContainer","ref","initialState","navigator","window","addEventListener","serviceWorker","register","scope","then","info","catch","error","module","exports"],"mappings":"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","file":"static/js/app.cc7dd6c0.chunk.js","sourcesContent":["const tintColor = '#2f95dc';\n\nexport default {\n  tintColor,\n  tabIconDefault: '#ccc',\n  tabIconSelected: tintColor,\n  tabBar: '#fefefe',\n  errorBackground: 'red',\n  errorText: '#fff',\n  warningBackground: '#EAEB5E',\n  warningText: '#666804',\n  noticeBackground: tintColor,\n  noticeText: '#fff',\n};\n","import * as React from 'react';\nimport { Ionicons } from '@expo/vector-icons';\n\nimport Colors from '../constants/Colors';\n\nexport default function TabBarIcon(props) {\n  return (\n    <Ionicons\n      name={props.name}\n      size={30}\n      style={{ marginBottom: -3 }}\n      color={props.focused ? Colors.tabIconSelected : Colors.tabIconDefault}\n    />\n  );\n}\n","import * as React from 'react';\nimport { Text } from 'react-native';\n\nexport function MonoText(props) {\n  return <Text {...props} style={[props.style, { fontFamily: 'space-mono' }]} />;\n}\n","import * as React from 'react';\nimport { Image, Platform, StyleSheet, Text, TouchableOpacity, View } from 'react-native';\nimport { ScrollView } from 'react-native-gesture-handler';\nimport * as WebBrowser from 'expo-web-browser';\n\nimport { MonoText } from '../components/StyledText';\n\nexport default function HomeScreen() {\n  return (\n    <View style={styles.container}>\n      <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n        <View style={styles.welcomeContainer}>\n          <Image\n            source={\n              __DEV__\n                ? require('../assets/images/robot-dev.png')\n                : require('../assets/images/robot-prod.png')\n            }\n            style={styles.welcomeImage}\n          />\n        </View>\n\n        <View style={styles.getStartedContainer}>\n          <DevelopmentModeNotice />\n\n          <Text style={styles.getStartedText}>221Open up the code for this screen:</Text>\n\n          <View style={[styles.codeHighlightContainer, styles.homeScreenFilename]}>\n            <MonoText>screens/HomeScreen.js</MonoText>\n          </View>\n\n          <Text style={styles.getStartedText}>\n            Change any of the text, save the file, and your app will automatically reload.\n          </Text>\n        </View>\n\n        <View style={styles.helpContainer}>\n          <TouchableOpacity onPress={handleHelpPress} style={styles.helpLink}>\n            <Text style={styles.helpLinkText}>Help, it didn’t automatically reload!</Text>\n          </TouchableOpacity>\n        </View>\n      </ScrollView>\n\n      <View style={styles.tabBarInfoContainer}>\n        <Text style={styles.tabBarInfoText}>This is a tab bar. You can edit it in:</Text>\n\n        <View style={[styles.codeHighlightContainer, styles.navigationFilename]}>\n          <MonoText style={styles.codeHighlightText}>navigation/BottomTabNavigator.js</MonoText>\n        </View>\n      </View>\n    </View>\n  );\n}\n\nHomeScreen.navigationOptions = {\n  header: null,\n};\n\nfunction DevelopmentModeNotice() {\n  if (__DEV__) {\n    const learnMoreButton = (\n      <Text onPress={handleLearnMorePress} style={styles.helpLinkText}>\n        Learn more\n      </Text>\n    );\n\n    return (\n      <Text style={styles.developmentModeText}>\n        Development mode is enabled: your app will be slower but you can use useful development\n        tools. {learnMoreButton}\n      </Text>\n    );\n  } else {\n    return (\n      <Text style={styles.developmentModeText}>\n        You are not in development mode: your app will run at full speed.\n      </Text>\n    );\n  }\n}\n\nfunction handleLearnMorePress() {\n  WebBrowser.openBrowserAsync('https://docs.expo.io/versions/latest/workflow/development-mode/');\n}\n\nfunction handleHelpPress() {\n  WebBrowser.openBrowserAsync(\n    'https://docs.expo.io/versions/latest/get-started/create-a-new-app/#making-your-first-change'\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n  developmentModeText: {\n    marginBottom: 20,\n    color: 'rgba(0,0,0,0.4)',\n    fontSize: 14,\n    lineHeight: 19,\n    textAlign: 'center',\n  },\n  contentContainer: {\n    paddingTop: 30,\n  },\n  welcomeContainer: {\n    alignItems: 'center',\n    marginTop: 10,\n    marginBottom: 20,\n  },\n  welcomeImage: {\n    width: 100,\n    height: 80,\n    resizeMode: 'contain',\n    marginTop: 3,\n    marginLeft: -10,\n  },\n  getStartedContainer: {\n    alignItems: 'center',\n    marginHorizontal: 50,\n  },\n  homeScreenFilename: {\n    marginVertical: 7,\n  },\n  codeHighlightText: {\n    color: 'rgba(96,100,109, 0.8)',\n  },\n  codeHighlightContainer: {\n    backgroundColor: 'rgba(0,0,0,0.05)',\n    borderRadius: 3,\n    paddingHorizontal: 4,\n  },\n  getStartedText: {\n    fontSize: 17,\n    color: 'rgba(96,100,109, 1)',\n    lineHeight: 24,\n    textAlign: 'center',\n  },\n  tabBarInfoContainer: {\n    position: 'absolute',\n    bottom: 0,\n    left: 0,\n    right: 0,\n    ...Platform.select({\n      ios: {\n        shadowColor: 'black',\n        shadowOffset: { width: 0, height: -3 },\n        shadowOpacity: 0.1,\n        shadowRadius: 3,\n      },\n      android: {\n        elevation: 20,\n      },\n    }),\n    alignItems: 'center',\n    backgroundColor: '#fbfbfb',\n    paddingVertical: 20,\n  },\n  tabBarInfoText: {\n    fontSize: 17,\n    color: 'rgba(96,100,109, 1)',\n    textAlign: 'center',\n  },\n  navigationFilename: {\n    marginTop: 5,\n  },\n  helpContainer: {\n    marginTop: 15,\n    alignItems: 'center',\n  },\n  helpLink: {\n    paddingVertical: 15,\n  },\n  helpLinkText: {\n    fontSize: 14,\n    color: '#2e78b7',\n  },\n});\n","import * as React from 'react';\nimport { StyleSheet, Text, View } from 'react-native';\nimport { Ionicons } from '@expo/vector-icons';\nimport * as WebBrowser from 'expo-web-browser';\nimport { RectButton, ScrollView } from 'react-native-gesture-handler';\n\nexport default function LinksScreen() {\n  return (\n    <ScrollView style={styles.container} contentContainerStyle={styles.contentContainer}>\n      <OptionButton\n        icon=\"md-school\"\n        label=\"Read the Expo documentation\"\n        onPress={() => WebBrowser.openBrowserAsync('https://docs.expo.io')}\n      />\n\n      <OptionButton\n        icon=\"md-compass\"\n        label=\"Read the React Navigation documentation\"\n        onPress={() => WebBrowser.openBrowserAsync('https://reactnavigation.org')}\n      />\n\n      <OptionButton\n        icon=\"ios-chatboxes\"\n        label=\"Ask a question on the forums\"\n        onPress={() => WebBrowser.openBrowserAsync('https://forums.expo.io')}\n        isLastOption\n      />\n    </ScrollView>\n  );\n}\n\nfunction OptionButton({ icon, label, onPress, isLastOption }) {\n  return (\n    <RectButton style={[styles.option, isLastOption && styles.lastOption]} onPress={onPress}>\n      <View style={{ flexDirection: 'row' }}>\n        <View style={styles.optionIconContainer}>\n          <Ionicons name={icon} size={22} color=\"rgba(0,0,0,0.35)\" />\n        </View>\n        <View style={styles.optionTextContainer}>\n          <Text style={styles.optionText}>{label}</Text>\n        </View>\n      </View>\n    </RectButton>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fafafa',\n  },\n  contentContainer: {\n    paddingTop: 15,\n  },\n  optionIconContainer: {\n    marginRight: 12,\n  },\n  option: {\n    backgroundColor: '#fdfdfd',\n    paddingHorizontal: 15,\n    paddingVertical: 15,\n    borderWidth: StyleSheet.hairlineWidth,\n    borderBottomWidth: 0,\n    borderColor: '#ededed',\n  },\n  lastOption: {\n    borderBottomWidth: StyleSheet.hairlineWidth,\n  },\n  optionText: {\n    fontSize: 15,\n    alignSelf: 'flex-start',\n    marginTop: 1,\n  },\n});\n","import * as React from 'react';\nimport { createBottomTabNavigator } from '@react-navigation/bottom-tabs';\nimport TabBarIcon from '../components/TabBarIcon';\nimport HomeScreen from '../screens/HomeScreen';\nimport LinksScreen from '../screens/LinksScreen';\n\nconst BottomTab = createBottomTabNavigator();\nconst INITIAL_ROUTE_NAME = 'Home';\n\nexport default function BottomTabNavigator({ navigation, route }) {\n  // Set the header title on the parent stack navigator depending on the\n  // currently active tab. Learn more in the documentation:\n  // https://reactnavigation.org/docs/en/screen-options-resolution.html\n  navigation.setOptions({ headerTitle: getHeaderTitle(route) });\n\n  return (\n    <BottomTab.Navigator initialRouteName={INITIAL_ROUTE_NAME}>\n      <BottomTab.Screen\n        name=\"Home\"\n        component={HomeScreen}\n        options={{\n          title: 'Get Started',\n          tabBarIcon: ({ focused }) => <TabBarIcon focused={focused} name=\"md-code-working\" />,\n        }}\n      />\n      <BottomTab.Screen\n        name=\"Links\"\n        component={LinksScreen}\n        options={{\n          title: 'Resources',\n          tabBarIcon: ({ focused }) => <TabBarIcon focused={focused} name=\"md-book\" />,\n        }}\n      />\n    </BottomTab.Navigator>\n  );\n}\n\nfunction getHeaderTitle(route) {\n  const routeName = route.state?.routes[route.state.index]?.name ?? INITIAL_ROUTE_NAME;\n\n  switch (routeName) {\n    case 'Home':\n      return 'How to get started';\n    case 'Links':\n      return 'Links to learn more';\n  }\n}\n","import * as React from 'react';\nimport { Platform, StatusBar, StyleSheet, View } from 'react-native';\nimport { SplashScreen } from 'expo';\nimport * as Font from 'expo-font';\nimport { Ionicons } from '@expo/vector-icons';\nimport { NavigationContainer } from '@react-navigation/native';\nimport { createStackNavigator } from '@react-navigation/stack';\n\nimport BottomTabNavigator from './navigation/BottomTabNavigator';\nimport useLinking from './navigation/useLinking';\n\nconst Stack = createStackNavigator();\n\nexport default function App(props) {\n  const [isLoadingComplete, setLoadingComplete] = React.useState(false);\n  const [initialNavigationState, setInitialNavigationState] = React.useState();\n  const containerRef = React.useRef();\n  const { getInitialState } = useLinking(containerRef);\n\n  // Load any resources or data that we need prior to rendering the app\n  React.useEffect(() => {\n    async function loadResourcesAndDataAsync() {\n      try {\n        SplashScreen.preventAutoHide();\n\n        // Load our initial navigation state\n        setInitialNavigationState(await getInitialState());\n\n        // Load fonts\n        await Font.loadAsync({\n          ...Ionicons.font,\n          'space-mono': require('./assets/fonts/SpaceMono-Regular.ttf'),\n        });\n      } catch (e) {\n        // We might want to provide this error information to an error reporting service\n        console.warn(e);\n      } finally {\n        setLoadingComplete(true);\n        SplashScreen.hide();\n      }\n    }\n\n    loadResourcesAndDataAsync();\n  }, []);\n\n  if (!isLoadingComplete && !props.skipLoadingScreen) {\n    return null;\n  } else {\n    return (\n      <View style={styles.container}>\n        {Platform.OS === 'ios' && <StatusBar barStyle=\"default\" />}\n        <NavigationContainer ref={containerRef} initialState={initialNavigationState}>\n          <Stack.Navigator>\n            <Stack.Screen name=\"Root\" component={BottomTabNavigator} />\n          </Stack.Navigator>\n        </NavigationContainer>\n      </View>\n    );\n  }\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n    backgroundColor: '#fff',\n  },\n});\n","import { useLinking } from '@react-navigation/native';\nimport { Linking } from 'expo';\n\nexport default function(containerRef) {\n  return useLinking(containerRef, {\n    prefixes: [Linking.makeUrl('/')],\n    config: {\n      Root: {\n        path: 'root',\n        screens: {\n          Home: 'home',\n          Links: 'links',\n          Settings: 'settings',\n        },\n      },\n    },\n  });\n}\n","/* eslint-env browser */\n\nif ('serviceWorker' in navigator) {\n  window.addEventListener('load', function() {\n    navigator.serviceWorker\n      .register('/expo-service-worker.js', { scope: '/' })\n      .then(function(info) {\n        // console.info('Registered service-worker', info);\n      })\n      .catch(function(error) {\n        console.info('Failed to register service-worker', error);\n      });\n  });\n}\n","module.exports = __webpack_public_path__ + \"static/media/robot-prod.c7578911.png\";","module.exports = __webpack_public_path__ + \"./fonts/SpaceMono-Regular.ttf\";"],"sourceRoot":""}